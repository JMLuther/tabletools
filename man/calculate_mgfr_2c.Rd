% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_mgfr_2c.R
\name{calculate_mgfr_2c}
\alias{calculate_mgfr_2c}
\title{Iohexol measured GFR with 2-compartment model (early and late sampling)}
\usage{
calculate_mgfr_2c(
  time,
  iohexol_conc,
  omnipaque_v = 300,
  ioh_inj_vol = 5,
  ioh_inj_wt = NULL,
  ioh_units = "ug/mL",
  time_units = "min",
  id = NULL,
  height = NA,
  height_units = "m",
  weight = NA,
  weight_units = "kg",
  nls_weights = TRUE,
  t_late = 120,
  t_early = 100,
  output = "summary"
)
}
\arguments{
\item{time}{A vector of time values (minutes)}

\item{iohexol_conc}{A vector of Iohexol plasma measurements (ug/mL)}

\item{omnipaque_v}{Omnipaque version (eg 300 = Omnipaque 300 recommended).
Other versions commonly available include 300 and 350 (USA) and 140, 280,
240 (other areas)}

\item{ioh_inj_vol}{Iohexol injection Volume by syringe volume injected (Not
preferred; use if weights not available)}

\item{ioh_inj_wt}{Iohexol injection Weight by syringe weight determination
(Pre-Post weight difference; recommnded method) in grams}

\item{ioh_units}{Iohexol concentration units, defaults to \code{ug/mL}}

\item{time_units}{Time units, defaults to \code{min}}

\item{id}{Study identifier (optional, passed to plot title)}

\item{height}{Patient Height, cm}

\item{height_units}{Height units, if not in cm}

\item{weight}{Patient Weight, kg}

\item{weight_units}{Weight units, if not in kg}

\item{nls_weights}{Use weights in nls model (T/F), defaults to \code{TRUE}. Uses
1/iohexol^2 as weights, which more heavily weight lower concentrations
obtained at later time points}

\item{t_late}{Time point (minutes) to split early and late phase, defaults to
\code{120}}

\item{t_early}{Time point (minutes) to split early and late phase, defaults
to \code{100}}

\item{output}{Desired output, defaults to \code{summary} of model. Alternatively
can specify \code{gfr}, \code{gfr_bsa}, \code{fit}, or \code{plot}

\code{summary} results include the named variables:
\itemize{
\item \code{mgfr_method} Method used for GFR calculation (NLLS or NLLS-w)
\item \code{mgfr_2c} The measured GFR (mL/min)
\item \code{mgfr_2c_bsa} The measured GFR (mL/min/1.73 m2) indexed to body surface area (BSA calculated by DuBois equation)
\item \code{iohexol_m}   Iohexol mass (ucg) injected. Determined either by user-provided syringe weight or volume injected.
\item \code{iohexol_0}   Iohexol concentration at t=0 calculated by A+B (theoretical, not measured)
\item \code{iohexol_vd}  Iohexol Volume of distribution estimated by Dose/Iohexol\link{t0}
\item \code{ioh_auc}  Iohexol calculated AUC from t=0 to Infinity, estimated by A/a + B/b
\item \code{A} Model parameter A
\item \code{a} Model parameter a, or \alpha
\item \code{B} Model parameter B
\item \code{b} Model parameter b, or \beta
\item \code{model_r2} Model Pseudo-R2, calculated as the linear regression R2 for predicted~observed values
\item \code{ssr} Sum of squared residuals
\item \code{sse} Sum of squared residuals for early time points
\item \code{ssl} Sum of squared residuals for late time points
\item \code{k10} Iohexol elimination rate constant from central compartment (1/min)
\item \code{k21} Iohexol transfer rate constant from peripheral to central compartment (1/min)
\item \code{k12} Iohexol transfer rate constant from central to peripheral compartment (1/min)
\item \code{n_early} Number of early time points used in model
\item \code{n_late} Number of late time points used in model
}

\code{gfr} returns a single \code{mgfr_2c} value, the measured GFR (mL/min).
\code{gfr_bsa} returns a single \code{mgfr_2c_bsa} value, the measured GFR
(mL/min/1.73 m2) indexed to body surface area (BSA calculated by DuBois
equation).

\code{fit} returns the non-linear regression model fit object.

\code{plot} returns a base-R plot of observed and predicted regression curve vs
time, and summary measures in the legend.}
}
\value{
Desired output with either a data.frame of results (\code{summary}), a
single value of BSA adjusted GFR (\code{gfr}), an \verb{nls object} for model fit
(\code{fit}), or a plot with observed values, model fit curve, and summary
results in the figure legend (\code{plot})
}
\description{
This method requires multiple early (alpha phase, typically <120 min) and
late (beta phase) sample measurements of iohexol to determine GFR (glomerular
filtration rate). This function uses nonlinear modeling via
Levenberg-Marquardt method in the \code{gsl_nsl} package and the \code{gslnls()}
function to fit the 2-compartment model of iohexol kinetics using the formula \eqn{C=A \cdot exp^{- \alpha \cdot t} +
B*e^{- \beta \cdot t} } and weighted by \eqn{1/Iohexol^2}. Use of the \code{gsl_nsl} package allows for better support of parameter constraints (constrained to positive values) and other methods (e.g. \code{predict} methods using fit object) compared to the base \code{nls()} function.  The general method and provided examples are
modified from \href{https://pubmed.ncbi.nlm.nih.gov/16612328/}{Schwartz et al.
Kidney Int. 2006.}. Further discussion and details regarding methods of fitting the 2-compartment models can be found at \href{https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8101203/}{Pottel et al.} Results are returned as a non-indexed value for GFR (\code{mgfr_2c}) and also indexed to BSA of 1.73m2 if height and weight are provided (\code{mgfr_2c_bsa}).
The summary provides estimates of kinetic parameters (k10, k21, k12) which
can be used in ODE models, but is not implemented here.
}
\examples{
library(tabletools)
## â”œ Schwartz Data ----
# Data extracted from Schwartz Fig1 PMID: 16612328
# Iohexol 5mL IV injection (Omnipaque 300, 5mL ~3235mg Iohexol)
# sampling at 10, 20, 30, 60, 120, 240, 300, 360 min
# time (minutes)
# Iohexol (ug/ml)
# age, height, weight not known for the example
dat <-
  data.frame(
    time = c(10, 20, 30, 60, 120, 180, 240, 300, 360),
    iohexol_ug_ml = c(656.1168132,477.1163595,371.3542728,
                      223.1121251,111.1086272,61.88251616,
                      37.43137242,21.79250307,12.75996292)  )

calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5)
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="gfr")
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="gfr_bsa")
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="fit")
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot", nls_weights = FALSE)
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot", id="Name-IDnumber-Date")

# Example for adding a prediction interval
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")
test_fit =calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="fit")
test_pred <- predict(test_fit, interval = "prediction", newdata = data.frame(time_min = 0:360), level = 0.95) |> as.data.frame()
test_pred$time <- 0:360
polygon(x = c(test_pred$time, rev(test_pred$time)),
        y = c(test_pred$upr, rev(test_pred$lwr)), 
        col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA)


# examples with fewer time points
dat_5p <- dat[dat$time \%in\% c(10, 20, 30, 120, 300), ]
calculate_mgfr_2c(dat_5p$time, dat_5p$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")

dat_5p <- dat[dat$time \%in\% c(10, 30, 60, 120, 300), ]
calculate_mgfr_2c(dat_5p$time, dat_5p$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")

dat_7p <- dat[dat$time \%in\% c(10, 20, 30, 60, 240, 300, 360), ]
calculate_mgfr_2c(dat_7p$time, dat_7p$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")

# ODE MODEL FOR COMPARISON;
# Example only to verify ODE parameter estimates, not required for GFR calculation
# This model uses solution from the nls model to get the kinetic parameters
library(deSolve)
m2c <- function(Time, State, Pars) {
  with(as.list(c(State, Pars)), {
    dIohexol <- -k10*Iohexol - k12*Iohexol + k21*C2 # Central Conc
    dC2 <-  k12*Iohexol - k21*C2                    # Peripheral Conc
    return(list(c(dIohexol, dC2)))
  })
}
# get parameters from nls model
ioh_nlfit <- calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5)
pars  <- c(k10 = ioh_nlfit$k10, k21 = ioh_nlfit$k21, k12 = ioh_nlfit$k12)
# plug into the ODE model solution
yini  <- c(Iohexol = ioh_nlfit$A+ioh_nlfit$B, C2=0)
times <- seq(0, 360, by = 1)
out   <- ode(yini, times, m2c, pars)
out_df <- as.data.frame(out)
# Plot to verfiy kinetic parameters vs nls model
calculate_mgfr_2c(dat$time, dat$iohexol_ug_ml, height = 1.67, weight = 70, ioh_inj_vol = 5, output="plot")
lines(out_df$time, out_df$Iohexol, lty=2)
}
